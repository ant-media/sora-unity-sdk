name: build

on:
  push:
    paths-ignore:
    - 'doc/**'
    - '**/*.md'
    - 'README.md'
  schedule:
  - cron: "0 0 * * *"

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Get Versions
      run: |
        Get-Content "VERSIONS" | Foreach-Object {
          if (!$_) { continue }
          $var = $_.Split('=')
          New-Variable -Name $var[0] -Value $var[1] -Force
        }
        echo "::set-output name=cuda_version::${CUDA_VERSION}"
        echo "::set-output name=boost_version::${BOOST_VERSION}"
        echo "::set-output name=webrtc_build_version::${WEBRTC_BUILD_VERSION}"
      id: versions
    - name: Cache CUDA ${{ steps.versions.outputs.cuda_version }}
      id: cache-cuda
      uses: actions/cache@v2
      with:
        path: _install\cuda
        key: cuda-${{ steps.versions.outputs.cuda_version }}
    - name: Cache Boost ${{ steps.versions.outputs.boost_version }}
      id: cache-boost
      uses: actions/cache@v2
      with:
        path: _install\boost
        key: windows-boost-${{ steps.versions.outputs.boost_version }}
    - name: Cache WebRTC Build ${{ steps.versions.outputs.webrtc_build_version }}
      id: cache-webrtc
      uses: actions/cache@v2
      with:
        path: _install\webrtc
        key: windows-webrtc-${{ steps.versions.outputs.webrtc_build_version }}
    - name: install_tools.bat
      run: .\install_tools.bat
    - name: cmake.bat
      run: .\cmake.bat
    - name: Copy Windows files
      run: |
        mkdir windows
        Copy-Item build\Release\SoraUnitySdk.dll windows
        Copy-Item _install\webrtc\NOTICE windows
    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v1
      with:
        name: windows
        path: windows
  build-macos:
    strategy:
      fail-fast: false
      matrix:
        name:
          - macos
          - ios
          # Android に関しては多分 Ubuntu でもいけると思うけど、
          # 普段ビルドしてるのは macOS からなので macOS でビルドする
          - android
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v2
    - name: Get Versions
      run: |
        source VERSIONS
        echo "::set-output name=boost_version::${BOOST_VERSION}"
        echo "::set-output name=webrtc_build_version::${WEBRTC_BUILD_VERSION}"
      id: versions
    - name: Cache Boost ${{ steps.versions.outputs.boost_version }}
      id: cache-boost
      uses: actions/cache@v2
      with:
        path: _install/boost
        key: boost-${{ steps.versions.outputs.boost_version }}
    - name: Cache WebRTC Build ${{ steps.versions.outputs.webrtc_build_version }}
      id: cache-webrtc
      uses: actions/cache@v2
      with:
        path: _install/webrtc
        key: webrtc-${{ steps.versions.outputs.webrtc_build_version }}
    - name: install_tools.sh
      run: ./install_tools.sh
    - name: cmake.sh
      run: ./cmake.sh ${{ matrix.name }}
    # macOS 用
    - name: Copy macOS files
      if: matrix.name == 'macos'
      run: |
        mkdir macos/
        cp -r build/macos/SoraUnitySdk.bundle/ macos/SoraUnitySdk.bundle/
        cp _install/macos/webrtc/NOTICE macos/
    - name: Upload macOS Artifact
      if: matrix.name == 'macos'
      uses: actions/upload-artifact@v1
      with:
        name: macos
        path: macos/
    # Android 用
    - name: Copy Android files
      if: matrix.name == 'android'
      run: |
        mkdir android/
        cp _install/android/webrtc/NOTICE android/
        cp _install/android/webrtc/jar/webrtc.jar android/
        cp build/android/libSoraUnitySdk.so android/
    - name: Upload Android Artifact
      if: matrix.name == 'android'
      uses: actions/upload-artifact@v1
      with:
        name: android
        path: android/
    # iOS 用
    - name: Copy iOS files
      if: matrix.name == 'ios'
      run: |
        mkdir ios/
        cp _install/ios/webrtc/NOTICE ios/
        cp _install/ios/webrtc/lib/libwebrtc.a ios/
        cp build/ios/_install/lib/libSoraUnitySdk.a ios/
    - name: Upload iOS Artifact
      if: matrix.name == 'ios'
      uses: actions/upload-artifact@v1
      with:
        name: ios
        path: ios/
  package:
    runs-on: macOS-latest
    needs: [build-windows, build-macos]
    steps:
    - uses: actions/checkout@v2
    - name: Download windows
      uses: actions/download-artifact@v1
      with:
        name: windows
    - name: Download macos
      uses: actions/download-artifact@v1
      with:
        name: macos
    - name: Download android
      uses: actions/download-artifact@v1
      with:
        name: android
    - name: Download ios
      uses: actions/download-artifact@v1
      with:
        name: ios
    - name: Packaging
      run: |
        set -ex
        mkdir -p SoraUnitySdk/Plugins/SoraUnitySdk/windows/x86_64
        mkdir -p SoraUnitySdk/Plugins/SoraUnitySdk/macos
        mkdir -p SoraUnitySdk/Plugins/SoraUnitySdk/ios
        mkdir -p SoraUnitySdk/Plugins/SoraUnitySdk/android/arm64-v8a
        cp -r Sora/ SoraUnitySdk/SoraUnitySdk/
        cp windows/SoraUnitySdk.dll SoraUnitySdk/Plugins/SoraUnitySdk/windows/x86_64/
        cp -r macos/SoraUnitySdk.bundle SoraUnitySdk/Plugins/SoraUnitySdk/macos/SoraUnitySdk.bundle
        cp android/libSoraUnitySdk.so SoraUnitySdk/Plugins/SoraUnitySdk/android/arm64-v8a/
        cp android/webrtc.jar SoraUnitySdk/Plugins/SoraUnitySdk/android/
        cp ios/libSoraUnitySdk.a SoraUnitySdk/Plugins/SoraUnitySdk/ios/
        cp ios/libwebrtc.a SoraUnitySdk/Plugins/SoraUnitySdk/ios/

        cp LICENSE SoraUnitySdk/

        # NOTICE ファイルを結合する
        cp NOTICE.md SoraUnitySdk/NOTICE
        echo ""
        echo "-----------------------------" >> SoraUnitySdk/NOTICE
        echo "# WebRTC for Windows" >> SoraUnitySdk/NOTICE
        echo "-----------------------------" >> SoraUnitySdk/NOTICE
        cat windows/NOTICE >> SoraUnitySdk/NOTICE

        echo "-----------------------------" >> SoraUnitySdk/NOTICE
        echo "# WebRTC for macOS" >> SoraUnitySdk/NOTICE
        echo "-----------------------------" >> SoraUnitySdk/NOTICE
        cat macos/NOTICE >> SoraUnitySdk/NOTICE

        echo "-----------------------------" >> SoraUnitySdk/NOTICE
        echo "# WebRTC for Android" >> SoraUnitySdk/NOTICE
        echo "-----------------------------" >> SoraUnitySdk/NOTICE
        cat android/NOTICE >> SoraUnitySdk/NOTICE

        echo "-----------------------------" >> SoraUnitySdk/NOTICE
        echo "# WebRTC for iOS" >> SoraUnitySdk/NOTICE
        echo "-----------------------------" >> SoraUnitySdk/NOTICE
        cat ios/NOTICE >> SoraUnitySdk/NOTICE

    - name: Upload SoraUnitySdk
      uses: actions/upload-artifact@v1
      with:
        name: SoraUnitySdk
        path: SoraUnitySdk
  release:
    name: Upload Release Asset
    if: contains(github.ref, 'tags/202')
    needs: [package]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Download SoraUnitySdk
      uses: actions/download-artifact@v1
      with:
        name: SoraUnitySdk
    - name: Archive to zip SoraUnitySdk
      run: |
        zip -r SoraUnitySdk SoraUnitySdk
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./SoraUnitySdk.zip
        asset_name: SoraUnitySdk.zip
        asset_content_type: application/zip
